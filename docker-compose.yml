version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: reembolso-db
    environment:
      POSTGRES_DB: reembolso_db
      POSTGRES_USER: reembolso_user
      POSTGRES_PASSWORD: reembolso_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - reembolso-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reembolso_user -d reembolso_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: reembolso-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reembolso-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: reembolso-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: reembolso_db
      DB_USER: reembolso_user
      DB_PASSWORD: reembolso_pass
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      BCRYPT_ROUNDS: 12
      ML_SERVICE_URL: http://ml-service:5000
      # AWS credentials (set these in .env file or environment)
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      # Email settings
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reembolso-network
    volumes:
      - ./:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: reembolso-ml
    ports:
      - "5001:5000"
    environment:
      PORT: 5000
      DEBUG: "false"
    volumes:
      - ./ml-service:/app
      - ml_models:/app/models
    networks:
      - reembolso-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: reembolso-frontend
    ports:
      - "0.0.0.0:3001:3001"  # Allow external connections
    environment:
      VITE_API_URL: http://localhost:3000
      HOST: 0.0.0.0  # Allow external connections
    depends_on:
      - backend
    networks:
      - reembolso-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: reembolso-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - reembolso-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  ml_models:

networks:
  reembolso-network:
    driver: bridge
